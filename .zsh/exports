# General
# TERM used to be xterm-256color but in rare situations (eg weechat under tmux)
# it really wants to be 'screen-like'.
export TERM="screen-256color"
export DISPLAY=:0.0
export EDITOR=vim

# Mostly for prompt things

# Obtain hostname, domain and other hints as follows:
# - HOST: shortname of host, used to identify it as e.g. a workstation
# - HOSTNAME: prompt display hostname, the actual text to show in prompt;
#   frequently just set to $HOST
# - DOMAIN: set to domain part, used to identify production systems etc
# - IS_WORKSTATION: determined either by manual override or $HOST
# - IS_VM: ditto

# If we seem to be on a DNS-name-less EC2 instance, use its instance ID
_id_file=/var/lib/cloud/data/instance-id
if [ ! `hostname -f 2>/dev/null` ] && test -e $_id_file; then
    HOST=`cat $_id_file`
    DOMAIN=
    HOSTNAME=$HOST
# Otherwise, assume FQDN provides deets
else
    HOST=`hostname -f | cut -d '.' -f 1`
    DOMAIN=`hostname -f | cut -d '.' -f 2-`
    HOSTNAME=`hostname`
fi


# PATH
super_path=/sbin:/usr/sbin
regular_path=/bin:/usr/bin
my_path=$HOME/bin
pipx_path=$HOME/.local/bin
local_path=/usr/local/bin:/usr/local/sbin
# TODO: probably rejigger all this sometime?
export PATH=$PATH:$local_path:$regular_path:$super_path:$my_path:$pipx_path

# For some reason, some systems (eg UA CentOS) give me a blank LS_COLORS, which
# is worse than no LS_COLORS as it kills eg tree's colorization.
unset LS_COLORS

# Git crap
export GIT_MERGE_AUTOEDIT=no

# In case I have to deal with Node crap
export NODE_PATH=/usr/local/lib/node_modules

# Java! I forget why this is necessary, used to live in unversioned local file
export JAVA_HOME="$(/usr/libexec/java_home 2>/dev/null)"

# No real less conf file but it honors this; I want it to basically always
# interpret ANSI colors & such.
export LESS="-R"

# Standardize SSH auth socket location, otherwise frequent reconnections to
# tmux means a stale auth sock. If randomizing it would otherwise have saved me
# from some adversary I'd already be turbofucked...
# NOTE: this differs from the similar approach taken on a SOURCE HOST (one
# where the originating ssh-agent is on the physical system) because there, you
# control the agent direct; but on a REMOTE HOST, this socket is set BY THE
# SSHD upon FORWARDING REQUESTS, and that is hardcoded / is what SETS this env
# var on new logins.
# So we must detect when we've become "disconnected" and twiddle a symlink!
# (Idea courtesy of Revsys blog post)
# NOTE: this still requires MAKING A NEW TMUX PANE/WINDOW to actually run the
# below; any existing shell will have a STALE auth sock env var (even if we
# weren't overwriting it ofc). Only new tmux subsessions will "see" the newly
# updated global env var (which happens because 'tmux attach' updates the tmux
# session's vars like SSH_AUTH_SOCK, DISPLAY, etc, per the update-environment
# tmux option, a list of var names).
# NOTE: that is the local session, NOT the 'global' environment, which will
# still be holding the env from whenever tmux was first started up!
# NOTE YET AGAIN: this is commented out as I've moved to just doing this in the
# prompt (no need to make a fresh pane/window just to trigger updating the
# below symlink). Leaving in place in case I ever go back to linux foreground
# terminals (eg lenovo as daily driver)
#export MY_AUTH_SOCK=~/.ssh/auth-socket
#if [[ $SSH_AUTH_SOCK != $MY_AUTH_SOCK ]]; then
#    ln -nfs $SSH_AUTH_SOCK $MY_AUTH_SOCK
#    export SSH_AUTH_SOCK=$MY_AUTH_SOCK
#fi
