# Overrides/shadowing, tho see-also some "alias x = sudo x" stuff elsewhere
alias tree='tree --filesfirst -C -a -I ".git|*.pyc|*.swp|dist|*.egg-info|.pytest_cache|target"'
alias ls='ls --color=auto'
alias ll='ls -al'

# bat, a nicer cat, plus warm its cache on new systems
# (otherwise it won't know about my dotfiles' extra themes)
alias cat=bat
if [[ ! -d $HOME/.cache/bat ]]; then
    bat cache --build &>/dev/null
fi

# Sudo
alias svim='sudo vim'
alias stail="sudo tail"
# Used to have alias become="sudo su -" but that is hard to complete.
# so now it's in ~/bin/. Hrrgh. The below sets up completion for it.
compdef _users become

# Package managers
# Sudo-ify apt/yum things if sourcing user is not root (which is a thing on eg
# containers)
if [[ $(whoami) != 'root' ]]; then
    alias apt-get='sudo apt-get'
    alias apt='sudo apt'
    alias apt-cache='sudo apt-cache'
    alias apt-file='sudo apt-file'
    alias yum='sudo yum'
fi
alias ash='apt show'
alias ai='apt install'
alias as='apt search'
alias au='apt update'
alias ap='apt purge'
alias dl='dpkg --list'
alias pi='pip install'
alias pie='pip install -e'
alias pir='pip install -r'
alias pu='pip uninstall'
alias pf='pip list'
alias pl='pf'
alias yi='yum install'
alias yiss='yi -y'
alias ys='yum search'

# Git helper (TODO: start using 'gh' tool instead, 'hub' unmaintained)
if [[ -e `which hub 2>/dev/null` && -e `which ruby 2>/dev/null` ]]; then
    alias git=hub
    compdef hub=git
fi
alias lg=lazygit
alias gb='git branch'
alias gba='git branch -a'
alias gc='git commit'
alias gcm='git commit -m'
alias gca='git commit -a'
alias gcam='git commit -a -m'
alias gd='git diff'
alias gdc='git diff --cached'
alias gl='git log'
alias glg="git log --graph --pretty=format:'%Cblue%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%ci)%Creset' --abbrev-commit"
alias gpl='git pull'
alias gps='git push'
alias gpsn='git push --no-verify'
alias gpsh='git push origin HEAD'
alias gpsf='git push -f origin HEAD'
alias gs='git status'
alias gsh='git show'
alias gt='git tag'
alias ga='git add'
alias gap='git add -p'
alias gco='git checkout'
alias gst='git stash'
alias gsa='git stash apply'
alias gm='git merge'
alias gf='git fetch'
alias grs='git reset HEAD'
alias grsh='git reset HEAD~1'
alias gch='git cherry-pick'
alias amend='git commit --amend --no-edit'
alias amende='git commit --amend'
alias gri='git rebase -i main'


function gremote() {
    git remote add -f $1
    if [[ $? == 128 ]]; then
        git fetch $1
    fi
}

function gcamp() {
    gcam "$1" && gps
}

function get_branch() {
    export CURRENT_BRANCH=`git symbolic-ref --short HEAD`
}

function gu() {
    get_branch
    TARGET=${2:-main}
    METHOD=${1:-merge}
    gco "$TARGET" && gpl && gco "$CURRENT_BRANCH" && git $METHOD "$TARGET"
}

function nuke() {
    get_branch
    gco main && gpl && gb -d $CURRENT_BRANCH
}

function marge() {
    get_branch
    gco ${1:-main} && gm $CURRENT_BRANCH && gb -d $CURRENT_BRANCH
}

function mg() {
    find . \
        -mindepth 1 -maxdepth 2 \
        -type d -name .git \
    | while read git_dir; do
        dir=`dirname $git_dir`
        echo $dir:
        cd $dir
        git $*
        cd - >/dev/null
        echo ""
    done
}

# RubyGems
alias gems='gem search -b'
alias geml='gem list -l'
alias gemi='gem install -b --no-rdoc --no-ri'
alias gemu='gem uninstall'

# Python
alias rmv='deactivate; rmvirtualenv'

function mkv() {
    virtualenv $1
    source $1/bin/activate
    cd $1
}

# Sphinx built dirs browsing (for headless dev w/o a 'open' binary).
# Will try to intelligently detect if it needs to slap a 'sites' prefix on the
# build dir path or not. Just give it 'docs' or 'www' as necessary.
function browse() {
    # I guarantee there is a way to do this with expansion/substitution but
    # hard to find the right keywords to search for...
    if [[ -d sites ]]; then sitesdir="sites/"; else sitesdir=""; fi
    # TODO: use real dns suffix and then hostname -f might work
    # TODO: find something that will figure out when to use the tailscale name
    # (or just do that 100% of the time?)
    # NOTE: can give an explicit path as $2 if the build dir isn't in a folder
    # named after the build task (lmao)
    inv $1 && pushd ${sitesdir}${2:-$1}/_build && python -m http.server -b $(hostname).localdomain 8888 && popd
}

# For arbitrary, non-venvwrapper-managed envs
function enter() {
    source $1/bin/activate
}

# Misc
# NOTE: --filesfirst requires tree 2.0+
alias rmpyc='rm **/*.pyc'
alias v=vim
alias be='bundle exec'
alias g=grep
# History but with ISO8601 timestamp, duration, show entire history
# TODO: maybe I should try Atuin sometime
alias history="fc -liD -${HISTSIZE}"
alias h=history
alias hg='history | grep'
alias l=ls -al
alias ports='sudo lsof -nP 2>/dev/null | grep LISTEN | sed -re "s/ +/ /g" | cut -d " " -f 1,3,9 | sort -u | column -t'

# Functions

# Prettyprint some JSON text with a few back-ends, w/ optional CURL:
# - 'json a-url-here' to curl-and-prettify
# - '<command emitting JSON> | json' to just-prettify
function json() {
    # Obtain prettyprinter command string
    if which jq > /dev/null; then
        # Default to using jq as prettyprinter, it's quite nice for that alone
        _pretty="jq -C ."
    else
        # Otherwise, fallback to Python's json module; Python is errywhere.
        _pretty="python -m json.tool"
        # Add pygmentize if it exists. (So, our absolute worst case is
        # pretty-printed, but not colorized. Still useful.)
        if which pygmentize > /dev/null; then
            _pretty="${_pretty} | pygmentize -l json"
        fi
    fi
    
    # Insert a curl if args were given; otherwise assume stdin is being used.
    if [[ -z $1 ]]; then
        eval ${_pretty}
    else
        eval "curl -ks $2 \"$1\" | ${_pretty}"
    fi | less -FR
}

# File pull request via 'hub', automatically inserting current HEAD as the
# source and the 'origin' remote account name as the source account.
# Useful for company-owned repos where hub's default assumptions don't work.
# TODO: make this usable in a forked-repo context
function pull() { # 'pr' already exists :(
    HEAD=`git symbolic-ref HEAD`
    # Probably a better way to do this. /lazy
    ACCOUNT=`git remote show -n origin | grep "Fetch URL" | cut -d ':' -f 3 | cut -d '/' -f 1`
    git push origin HEAD
    git pull-request -b ${1:-main} -h $ACCOUNT:${HEAD#refs/heads/} $2
}

# Fetch pull request X so its SHAs are available.
function fetch-pr() {
    git fetch origin pull/$1/head$2
}

# Create new local branch based off pull request X.
function pr-branch() {
    _NEWBRANCH=$1-int
    fetch-pr $1 :$_NEWBRANCH
    git checkout $_NEWBRANCH
    # NOTE: $current_git_branch is usually set by .zsh/prompt
    [[ $2 == "nomerge" ]] || git merge ${current_git_branch:-main}
}

# Stupid newline delimited => comma delimited bit (happens to ensure no
# trailing comma which is nice)
function nl2comma() {
    python -c "import sys; print ','.join(sys.stdin.read().splitlines())"
}

# Gnuplot junk
function asciigraph() {
    gnuplot -e "set term dumb; plot '-' with lines"
}

# Heh.
function _lolvim() {
    _msg="THIS AIN'T VIM, BUDDY"
    cowsay $_msg 2>/dev/null || echo $_msg
}
function :wq() { _lolvim }
function :qa() { _lolvim }

# Helpers to go from non-timestamped log output to something bin/logparse can
# profile. Expects stdin.
alias tss='ts -s "%H:%M:%.S"'
function profile() {
    tss | logparse $@
}

# Docker
alias d='docker'
