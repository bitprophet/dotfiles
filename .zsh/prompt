#
# Colorized prompt, with different username colors for different systems.
#

# My specific palette, using zsh's builtin color expansions
typeset -A PALETTE C # Force zsh to treat as an array
PALETTE=(
    blue    33
    cyan    51
    green   82
    purple  171
    red     160
    yellow  227
    orange  167
)
# Wrap in %F{} and use short array name
for key in ${(k)PALETTE}; do
    C[$key]="%F{$PALETTE[$key]}"
done

# System => color/hostname map:
#   NAME: username color
#   CWD: location/cwd color
# Defaults:
NAME=$C[green]
CWD=$C[blue]

# NOTE: HOSTNAME, HOST, DOMAIN, IS_WORKSTATION, IS_SERVER, and IS_VM all come
# from .zsh/exports or .zsh/*local, or are unset.

# If $IS_WORKSTATION not already set, determine it from short hostname
if [[ -z $IS_WORKSTATION ]]; then
    case $HOST in
        basroil ) IS_WORKSTATION=1 ;;
    esac
fi
# Ditto IS_SERVER, IS_VM (latter much less oft used now)
if [[ -z $IS_SERVER ]]; then
    case $HOST in
        gosroth ) IS_SERVER=1 ;;
    esac
fi
if [[ -z $IS_VM ]]; then
    case $HOST in
        vm* | debian* | ubuntu* ) IS_VM=1 ;;
    esac
fi

# Here, we hopefully have the right picture about whether this is a workstation
# or VM requiring overrides of the domain-level colorization.
if [[ -n $IS_WORKSTATION ]]; then
    NAME=$C[yellow]
    CWD=$C[green]
    HOSTNAME=$HOST
fi
if [[ -n $IS_SERVER ]]; then
    NAME=$C[red]
    HOSTNAME=$HOST
fi
if [[ -n $IS_VM ]]; then
    NAME=$C[orange]
    CWD=$C[green]
    HOSTNAME=$HOST
fi
# Stupid backdoor for manually curated hostnames set earlier in the dotfiles :(
# TODO: just clean all this up so things are more explicit re: workstation, vm,
# server; and don't set any global defaults. That should make it easier to just
# go "is HOSTNAME set yet? no? set it".
if [[ -n $HOSTNAME_OVERRIDE ]]; then
    HOSTNAME=$HOSTNAME_OVERRIDE
fi


function shortpath() {
    # Special vim-tab-like shortpath (~/folder/directory/foo => ~/f/d/foo)
    _pwd=`pwd | sed "s#$HOME#~#"`
    if [[ $_pwd == "~" ]]; then
        _dirname=$_pwd
    else
        _dirname=`dirname "$_pwd" | esed "s/\/(.)[^\/]*/\/\1/g"`
        if [[ $_dirname == "/" ]]; then
            _dirname=""
        fi
        _dirname="$_dirname/`basename "$_pwd"`"
    fi
    echo "${_dirname}"
}

function virtualenv_() {
    # Make sure it's cleaned out if we exit a virtualenv/project and don't
    # enter another one right away
    venv=""

    # Python virtualenv
    _venv=`basename "$VIRTUAL_ENV"`
    if [[ -n $_venv ]]; then
        venv=$_venv
    fi

    # Bundler bundle (Ruby)
    # This will 'overwrite' a virtualenv-driven $_venv if both exist, which
    # isn't often, lately
    # TODO: seek towards FS root in case in a subdir (not too common)
    _conf=".bundle/config"
    if [[ -f ${_conf} ]]; then
        # TODO: sincerely doubt anything portable & fast has YAML built in, but
        # maybe actually parse it sometime if I care hard enough
        _bundle_path="BUNDLE_PATH: /Users/jforcier/.bundles/"
        venv=`egrep "${_bundle_path}" ${_conf} | sed -e "s#${_bundle_path}##"`
    fi

    # Clojure (only if neither of the others)
    # Do dumb shit to avoid JVM hit :(
    # TODO: seek towards FS root in case in a subdir (not too common)
    if [[ -f project.clj && -z $_venv ]]; then
        _venv=`egrep -o "\(defproject ([^ ]+)" project.clj | sed -e "s/^(defproject //"`
        if [[ -n $_venv ]]; then
            venv=$_venv
        fi
    fi

    if [[ -n "$venv" ]]; then
        echo "$venv"
    else
        echo - -
    fi
}

function ssh_auth_sock() {
    # This ensures that every fresh prompt asks the tmux server for the current
    # session's stored env var (which is otherwise not synchronized with
    # pre-existing shells). Thus, all that is required on reconnecting to a
    # tmux session from a new ssh login (which will have a distinct auth sock)
    # is mashing enter instead of making a whole new shell somewhere.
    export $(tmux show-environment SSH_AUTH_SOCK)
}

function git_status() {
    _branch=$(\git symbolic-ref HEAD 2>/dev/null)
    current_git_branch=${_branch#refs/heads/}
}

function dirty() {
    # Print nothing if not in a git repo
    [[ -z $current_git_branch ]] && return

    # Git branch / dirtiness
    # Dirtiness cribbed from:
    # http://henrik.nyh.se/2008/12/git-dirty-prompt#comment-8325834
    _dirty="*"
    if \git update-index -q --refresh &>/dev/null; \git diff-index --quiet --cached HEAD --ignore-submodules -- 2>/dev/null && \git diff-files --quiet --ignore-submodules 2>/dev/null
        then _dirty=""
    fi
    echo $_dirty
}

function untracked() {
    [[ -z $current_git_branch ]] && return
    _untracked=""
    # Taken from oh-my-zsh/lib/git.zsh
    if \git status --porcelain 2>/dev/null | grep '^??' &>/dev/null
        then _untracked="*"
    fi
    echo $_untracked
}

function branch() {
    if [[ -n "$current_git_branch" ]]; then
        echo "$current_git_branch"
    else
        echo - -
    fi
}

function displayhost() {
    # %m/%M seem broken for me? :(
    echo "$HOSTNAME"
}

#
# Prompt itself
#

function precmd() {
    # Set ssh auth sock
    ssh_auth_sock
    # Set git vars
    git_status
    # <NAME>HOST</NAME>:<CWD>pwd</CWD>
    #     {<magenta>venv</magenta>} [<magenta>branch</magenta>] <CWD>end</CWD>
    hostname="${NAME}$(displayhost)%f"
    _path="${CWD}%~%f"
    end="${CWD}Â»%f"
    export PS1="${hostname}:${_path} {$C[purple]$(virtualenv_)%f} [$C[purple]$(branch)$C[red]$(dirty)%f$C[yellow]$(untracked)%f]
${end} "
    export RPS1="%(?..$C[red]%?%f)"

    # Nuke mkvirtualenv_help
    unfunction mkvirtualenv_help 2>/dev/null
}
