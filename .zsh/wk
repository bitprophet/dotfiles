#
# Generic "move me to my project dir" function/alias.
#
# Tries to "workon" a Python virtualenv, then (either way) switches to the
# directory in question.
#
# This means that we can A) use this for non-Python projects, and B) avoid
# having to add the 'cd' call to every. single. virtualenv's postactivate
# script.
#
# Also deactivates any currently active virtualenv, just for neatness' sake.
#
# Finally, when this is sourced - i.e. when a new shell opens - an attempt is
# made to see if we're a new pane in an existing titled window, and 'wk
# <that window name>' is called if it matches a wk session name.

FOLDERS=(~/Code/*)  # expands into an array result!
RCFILE=".wkrc"

function wk() {
    # Exit any active venv, JIC.
    deactivate 2>/dev/null
    # Try 'global' (to user) virtualenvs folder ($WORKON_HOME, set in
    # .zsh/python) first, as it's most common.
    GLOBAL_VENV=${WORKON_HOME}/${1}
    # When using `uv`, prefer global venv, not local .venv
    # (Set unconditionally: sometimes you'll want it for venv creation)
    export UV_PROJECT_ENVIRONMENT=$GLOBAL_VENV
    if [[ -d $GLOBAL_VENV ]]; then
        source ${GLOBAL_VENV}/bin/activate
    fi

    # Try to find the given folder and cd to it.
    for folder in $FOLDERS; do
        target=$folder/$1
        if [[ -d $target ]]; then
            cd $target
            # Also execute any project init file
            if [[ -f $RCFILE ]]; then
                source $RCFILE
            fi
            # Per-project virtualenv attempt!
            # TODO: other permutations? meh
            if [[ -d .venv ]]; then
                source .venv/bin/activate
            fi
            if [[ -d venv ]]; then
                source venv/bin/activate
            fi
            # Site-packages env var useful in e.g. vim, cd
            if [[ -n "$VIRTUAL_ENV" ]]; then
                export SITEPACKAGES=$(python -c "from sysconfig import get_path; print(get_path('purelib'))")
            fi
            # Source Invoke autocompletion in case it's in use in that project
            # (be lazy and just look for a tasks tree, since otherwise the
            # global inv might trigger this. Meh!)
            [[ -d tasks || -f tasks.py ]] && source <(inv --print-completion-script zsh 2>/dev/null)
            return 0
        fi
    done
    # TODO: offer to setup project if doesn't exist
    return 1
}

# Completion
function _wk() {
    compadd $(find -L $FOLDERS -mindepth 1 -maxdepth 1 -type d -not -name ".*" -exec basename {} \; 2>/dev/null)
}
compdef _wk wk

# Auto-wk if not running inside mux
if [[ $TMUX_PANE != "" && $IN_MUX != "1" ]]; then
    wk $(tmux display-message -p "#W")
fi
