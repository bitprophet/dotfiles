#
# Generic "move me to my project dir" function/alias.
#
# Tries to "workon" a Python virtualenv, then (either way) switches to the
# directory in question.
#
# This means that we can A) use this for non-Python projects, and B) avoid
# having to add the 'cd' call to every. single. virtualenv's postactivate
# script.
#
# Also deactivates any currently active virtualenv, just for neatness' sake.
#
# Finally, when this is sourced - i.e. when a new shell opens - an attempt is
# made to see if we're a new pane in an existing titled window, and 'wk
# <that window name>' is called if it matches a wk session name.

ROOT=~/Code
FOLDERS=($ROOT/oss $ROOT/mlab $ROOT/personal $ROOT/others)
RCFILE=".wkrc"

function wk() {
    # deactivate/workon will fail silently if project is not a virtualenv.
    deactivate 2>/dev/null
    workon $1 2>/dev/null
    # Try adding to $VIRTUAL_ENV with something even more useful
    if [[ -n "$VIRTUAL_ENV" ]]; then
        export SITEPACKAGES=$(ls -1d $VIRTUAL_ENV/lib/python*/site-packages)
    fi
    # Try to find the given folder and cd to it.
    for folder in $FOLDERS; do
        target=$folder/$1
        if [[ -d $target ]]; then
            cd $target
            # Also execute any project init file
            if [[ -f $RCFILE ]]; then
                source $RCFILE
            fi
            return 0
        fi
    done
    return 1
}

# Completion
function _wk() {
    compadd $(find -L $FOLDERS -mindepth 1 -maxdepth 1 -type d -not -name ".*" -exec basename {} \; 2>/dev/null)
}
compdef _wk wk

# Auto-wk if not running inside mux
if [[ $TMUX_PANE != "" && $IN_MUX != "1" ]]; then
    wk $(tmux display-message -p "#W")
fi
