#
# Virtualenvwrapper
#

# Don't blow up when PYTHONDONTWRITEBYTECODE is set
export VIRTUALENV_USE_DISTRIBUTE=1
# Not sure why the hell the docs say one thing and the code another.
# Set both so it always works.
export VIRTUALENV_DISTRIBUTE=1

export WORKON_HOME=~/.virtualenvs
test -d $WORKON_HOME || mkdir $WORKON_HOME

# Assumes we've installed virtualenvwrapper to the default global pyenv python
# This is a tad meh but pyenv 'hides' the real .sh behind a dispatcher in
# its shims/ folder; sourcing that simply won't work. Doing this here is
# better than hardcoding the real specific Python version path.
# NOTE: the outermost login shell will source this, setting
# VIRTUALENVWRAPPER_SCRIPT; but subshells then lack the function definitions
# (while retaining env vars, including VIRTUALENVWRAPPER_SCRIPT). I'm too lazy
# to figure out exactly how I want this to work so for now, we just check: if
# the env var is set, use it instead of recalculating where virtualenv lives;
# and either way, always attempt to source the appropriate script.
# NOTE: we also need to account for non-pyenv-bearing systems which might be
# manually setting VIRTUALENVWRAPPER_SCRIPT or w/e (eg Linux servers).
if [[ -z $VIRTUALENVWRAPPER_SCRIPT ]]; then
    if have pyenv; then
        export VIRTUALENVWRAPPER_SCRIPT=`pyenv which virtualenv`wrapper.sh
    else
        # TODO: can we do anything useful here? No pyenv and no manual
        # venvwrapper. Could just set it to some fallback location(s) if
        # detected...
    fi
fi
# Here, presence of the variable implies we can successfully source its target
if [[ -n $VIRTUALENVWRAPPER_SCRIPT ]]; then
    source $VIRTUALENVWRAPPER_SCRIPT
fi


#
# Pip env vars
#

# Respect my virtualenvs, please
export PIP_RESPECT_VIRTUALENV=true
export PIP_VIRTUALENV_BASE=$WORKON_HOME
# Don't litter pip_log.txt files in cwd!
export PIP_LOG_FILE='/tmp/pip-log.txt'
# N.B. the 'mac' file also sets up use of devpi as a caching server, via
# PIP_INDEX_URL.

#
# Pipsi (standalone binaries-in-virtualenvs)
#

export PATH="/Users/jforcier/.local/bin:$PATH"

#
# Python env vars
#

# Only affects 2.6 but should be harmless in 2.5
export PYTHONDONTWRITEBYTECODE=1


#
# My own projects' tab complete support
# (works best here; really wants pyenv, pipsi etc type path manipulation so
# inv/fab are visible, so putting it up in the completion config is too early.
# ugh.)
#

have inv && source <(inv --print-completion-script zsh 2>/dev/null)
