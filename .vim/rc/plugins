"
" Plugin loading & settings
"


" vim-plug!

let plugins_dir = '~/.vim/plugged'

call plug#begin(plugins_dir)

" Improved JSON syntax formatting, display, etc
Plug 'elzr/vim-json', {'commit': 'f5e3181'}
" Fuzzy file finder
Plug 'ctrlpvim/ctrlp.vim', {'commit': '8b4a952'}
" Clojure
Plug 'guns/vim-clojure-static', {'commit': 'bc1bebf'}
" TOML
Plug 'cespare/vim-toml', {'commit': 'f6f79f3'}
" Git integration (blame, diff formatting, etc)
Plug 'tpope/vim-fugitive', {'commit': '0095769'}
" Weak/redundant/etc word checker
Plug 'reedes/vim-wordy', {'tag': 'v1.1'}
" requirements.txt syntax
Plug 'raimon49/requirements.txt.vim', {'tag': 'v-1.2.0'}
" More up-to-date Python syntax than the builtin (eg Python 3, f-strings, etc)
" NOTE: builtin Python syntax now covers match/case but somehow not f-strings,
" or at least, not well. Keeping this plugin for now.
Plug 'vim-python/python-syntax', {'commit': '2cc00ba'}
" Nix syntax
Plug 'LnL7/vim-nix', {'commit': '7d23e97'}
" Ack (or w/e you want) project search
Plug 'mileszs/ack.vim', {'commit': '36e40f9'}
" TF/OpenTofu
Plug 'hashivim/vim-terraform', {'commit': '24de93a'}
" Rust syntax, rustfmt integration, etc
" (the syntax plugin bundled w/ vim _is_ from the same repo, but from like
" 2016? heh.)
Plug 'rust-lang/rust.vim', {'commit': '889b9a7'}
" LSP experimentation (for rust-analyzer first)
Plug 'prabirshrestha/vim-lsp', {'commit': 'c20c665'}
" And for Python (but also generally; uses npm to install sub-plugins)
" TODO: as with fugitive, CoC appears to have an order of operations issue
" where you cannot call CocInstall until a full reload occurs. otherwise could
" slap a function reference or lambda into the 'do' key in this dict, to
" install things like coc-basedpyright.
" TODO: for now I'm likely to work around this with a small shell script.
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Colorschemes-as-plugins
Plug 'morhetz/gruvbox', {'commit': 'f1ecde8'}
" NOTE: jellybeans and kanagawa-mini are just-colorschemes in dotfiles,
" though they may be configured down below.

call plug#end()


" netrw
" Default to tree view 
let g:netrw_liststyle = 3
" Hide common hidden files
let g:netrw_list_hide = '.*\.py[co]$,\.git$,\.swp$'
" Don't use frickin elinks, wtf
let g:netrw_http_cmd = "wget -q -O" " or 'curl -Ls -o'

" VimClojure
let g:vimclojure#ParenRainbow=1
let g:vimclojure#DynamicHighlighting=1

" CtrlP
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v(\.(git|egg-info|gradle|build|(pytest|mypy)_cache|venv)|htmlcov|__pycache__|public|venv|_build|build)$',
  \ 'file': '\v\.(gz|swp)$',
  \ 'link': '\vtarget',
\ }
" Used to set clear-cache-on-exit to 0 for cross-session caching, but this is
" actually way more annoying than the default behavior!
let g:ctrlp_clear_cache_on_exit = 1
" Because certain Java project directories get into the multiple 10k's of files
let g:ctrlp_max_files = 100000
" Don't hide dotfiles; I want to edit eg .blah.yml files more than I want to
" avoid matching them
let g:ctrlp_show_hidden = 1
map <C-t> :CtrlPTag<CR>

" vim-python/python-syntax
let g:python_highlight_all = 1

" ack.vim
" Any empty ack search will search for the work the cursor is on
let g:ack_use_cword_for_empty_search = 1
" See mappings config for leader-mappings used with ack.vim

" rust.vim
" Don't override my textwidth, etc settings. rude!
let g:rust_recommended_style = 0

" vim-lsp (+ rust-analyzer)
" Debuggery
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/tmp/vim-lsp.log')
"let g:lsp_use_native_client = 1
"let g:lsp_show_message_log_level = 'log'
if executable('rust-analyzer')
    au User lsp_setup call lsp#register_server({
         \   'name': 'Rust Language Server',
         \   'cmd': {server_info->['rust-analyzer']},
         \   'env': {'RUSTFLAGS': '-D warnings'},
         \   'allowlist': ['rust'],
         \   'initialization_options': {
         \       'cargo': {
         \           'sysroot': trim(system('cargo -Z unstable-options rustc --print sysroot')),
         \       },
         \   },
         \ })
    " r-a/lsp version of what rust.vim's rustfmt_autosave did
    autocmd BufWritePre *.rs LspDocumentFormatSync

    " Code actions don't normally seem useful? it's usually either broken or
    " pointless 'refactorings', and they are also applicable on nearly any line,
    " making it way too high noise vs signal. (this is at least in rust; see
    " also https://rust-analyzer.github.io/manual.html#assists-code-actions,
    " many of those SOUND useful but I wasn't seeing them pop up.)
    let g:lsp_document_code_action_signs_enabled = 0
endif

" Colorscheme twiddles
" TODO: on my Ventura personal box's iTerm2 with seemingly identical settings,
" I didn't need to do this, jellybeans' background was still pretty dark. Here,
" it defaulted to a much lighter tone with worse contrast properties, so I am
" overriding it.
" TODO: thankfully this appears backwards compat on said Ventura box
let g:jellybeans_overrides = {'background': {'guibg': '000000'}}
