#! /usr/bin/env nix-shell
#! nix-shell -i python -p python39Packages.invoke

import os
import sys

# macOS only; used for displays()
try:
    import plistlib
except ImportError:
    pass

from invoke import Context, Config
from invoke.config import yaml # Easy way to grab interpreter-specific module


# 'Local' invoke context/config
ctx = Context(Config({'run': {'env': {'IN_MUX': '1'}}}))


# Helpers
def cmd(command):
    ctx.run("tmux send-keys \"{0}\" Enter".format(command))

def cmd_all(layout):
    if 'cmd_all' in layout:
        cmd(layout['cmd_all'])

def layout_path(name):
    filename = "{0}.yml".format(name)
    return os.path.expanduser(os.path.join('~', '.tmux', filename))

def displays():
    """
    Yields attached display information as a dict.
    """
    # NOTE: not currently used but no other good place to preserve this. We
    # presently just prefer to look at the properties of the terminal instead
    # of doing explicit 'what display are you?' checks.
    data = ctx.run("system_profiler SPDisplaysDataType -xml", hide=True).stdout
    plist = plistlib.loads(data.encode('utf-8'))
    displays = {
        x['_name']: {
            'pixels': [int(y) for y in x['_spdisplays_pixels'].replace('x ', '').split()],
            'resolution_string': x['_spdisplays_resolution'],
        }
        for x in plist[0]['_items'][0]['spdisplays_ndrvs']
    }
    return displays


# Usage: mux <layout-name-or-default-layout-parameter>
name = None
try:
    arg = name = sys.argv[1]
except IndexError:
    sys.exit("Need to give a layout name / parameter!")
# Set env var so ~/.zsh/wk knows not to auto-wk
os.environ['IN_MUX'] = '1'
# If name given matches a layout, use it.
# Otherwise select default layout and parameterize it instead
path = layout_path(arg)
if os.path.exists(path):
    arg = None
else:
    path = layout_path('default')
# Load YAML config & interpolate w/ param given
with open(path) as fd:
    data = fd.read()
    interpolated = data.format(arg) if arg is not None else data
    layout = yaml.safe_load(interpolated)

# Obtain window name - explicit -> 1st param -> nothing/default-tmux-val
name = layout.get('name', name)
name_arg = "-n {0}".format(name) if name else ""
# Create new named window & obtain size
ret = ctx.run(
    "tmux new-window {0} -P -F \"#{{pane_width}}\"".format(name_arg),
    hide='stdout'
)
width = int(ret.stdout)
# Send default command to this first pane
cmd_all(layout)

# Split down middle for two vertically oriented panes, with the lefthand pane
# being appropriate for 2, 3 or etc vim splits.
# Size left pane depending on total window size. Rather, size the new (right)
# pane based on whatever's left over, which is easier.
# TODO: use displays() and branch on display name? More fragile but might allow
# for more targeted behavior or less buggy math.
# NOTE: we subtract desired width, +1 for the divider column.
if width >= (242 + 1 + 80):
    right_width = width - 243
elif width >= (161 + 1 + 80):
    right_width = width - 162
else:
    right_width = width - 81
ctx.run("tmux split-window -h -l {0}".format(right_width))
# Send default command to this next pane (which is selected by default)
cmd_all(layout)
# Send non-default command, if any
first = layout['right_panes'].pop(0)
cmd(first)

# Split horizontally on right-hand pane if desired
for pane_cmd in layout['right_panes']:
    ctx.run("tmux split-window -v")
    cmd_all(layout)
    if pane_cmd:
        cmd(pane_cmd)
